텍스트와 border 여백 주고 싶을 때는 padding

그리드에서 container 배경색과 똑같은 부분은 item을 만들 필요가 없음

대문자 처리는 text-transform:uppercase;

텍스트 크기 처리
--> body로 전체적인 사이즈 주고 커스터마이징 하고 싶은 부분 조정
--> 반응형으로 하고 싶으면 vw사용

grid-row: span 3;처럼 grid-area 굳이 안 쓰고 간단한거 바로 쌉가능

padding을 주면 text를 예쁘게 배치할 수 있다


※가운데정렬
width:80%주고 margin:0 auto;


텍스트 나열 할 때
--><li>안쓰고 <span>에다 display:block줘서 가능

배너처리
--> img태그로 안하고 <h1>태그 주고 텍스트는 indent로 숨기고 background-image로 덮기

 
※그리드
부모로 격자 나누면 자식이 차례로 배치됨.
자식 요소 하나하나를 어디에 배치할 지 컨트롤이 가능.
컨테이너로 레이아웃을 짜고 그 안에 들어갈 자식요소만 만들어주면 됨. 
key point
1. 구조(위치배정)는 컨테이너에서 그리드 + 자식 아이템으로 짠다.
2. 컨텐츠(화면에 보여질 부분)는 자식 아이템 안에다가 만들면 됨.

※auto-fit과 auto-fill
width 줄어들 때 반응형 만들라고
몇 개의 아이템이 올지 모를 때. 들어오는 애들 flexible하게 반응하고 싶을 때. 
주로 minmax랑 같이 씀.  
auto-fit이랑 auto-fill 둘 다 원리는 똑같음. 
개수를 최대한 많이 쳐 넣으려고 함. 단 부모의 크기가 더 크면 auto-fit이 여백도 쫙 붙일 뿐임
아이템의 개수가 많아서 넘치면 auto로 들어감
grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));  column을 이렇게 짜야 흔히 아는 반응형이 자동으로 구현됌




※grid-auto-rows랑 grid-auto-columns 
레이아웃 짜는 용도가 아님.
짜여진 레이아웃에 안 들어가는 아이템의 크기를 세팅해주는 것임.

※repeat(auto-fit, 100px)
아이템 개수를 모르니까 auto-fit 
100px은 길이 고정
auto-fill보단 auto-fit이 좋네.반응형으로 쓰기


※코드의 의미
grid-template-rows: 30px repeat(auto-fit,minmax(100px,1fr));
두 번째 행부터 오는 자식들은 몇 개가 올지 모르나 세로 100px이상되도록 최대한 많은 박스를 만들건데 여백이 없도록 빽빽하게 자식들을 채울 것임.

grid-template-rows: 30px repeat(auto-fill,minmax(100px,1fr));
위와 똑같은데 여백이 있으면 자식들을 채우지 않을 것임


grid-template-columns: 30px repeat(auto-fit,minmax(100px,1fr));
두 번째 열부터 오는 자식들은 몇 개가 올지 모르나 가로 100px이상되도록 최대한 많은 박스를 만들건데 여백이 없도록 빽빽하게 자식들을 채울 것임.

grid-template-columns: 30px repeat(auto-fill,minmax(100px,1fr));
위와 똑같은데 여백이 있으면 자식들을 채우지 않을 것임








※작업 순서의 로직은
HTML --> CSS임
레이아웃을 어떻게 짤 지 정하고 필요한 HTML을 때려 넣은 후 CSS로 배치하는 것 뿐임.
CSS로 그리드 먼저 짜고 HTML을 넣으면 헷갈림

※img vs background
[img] 
마크업 하고 싶을 때
유저가 등록하는 이미지일 때 
인쇄 시 이미지도 출력되어야 할 때
이미지 크기에 따라 레이아웃이 변할 때  
SEO(Search Engine Optimization)

[background]
디자인용도
IR(Image Replacement)기법 & Sprite기법
개발 생산성, 유지보수 효율 향상
인쇄 시 출력되지 않기를 원할 때



텍스트를 세로방향으로 쓰기
-->writing-mode:vertical-rl;
text-orientation:upright;


텍스트를 시계방향 90도로 보이게 쓰기
--> writing-mode:vertical-rl;

텍스트를 반시계방향 90도로 보이게 쓰기 
-->

블록요소 안 텍스트를 세로 가운데 배치하기
-->height 없으면 항상 세로 가운데 배치임.
-->height 있는 경우 flex랑 align-items:center;써야함

블록요소 안 텍스트를 가로 가운데 배치하기
-->width 안 줄이면 text-align:center;
-->width 줄이면  margin:auto;해서 가운데에 배치하고 text-align:center;로 박스안에서 가운데 정렬

 
텍스트를 블록으로 감싸놔야 텍스트 커져도 안 튀어나가고 블록이 반응해서 늘어남
-->X

화면이 줄면 text도 자리 지키면서 같이 줄음
문제는 블록안의 text가 border밖으로 튀어나가는 경우임.
span은 border밖으로 안 튀어나감.
block안의 text가 튀어나가는 걸 막기위해 word-wrap:break-word;를 해주는 거임 
그리고 word-break로 잘리는 포인트를 주는 거임.





 
  